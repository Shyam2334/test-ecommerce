services:
  user-service:
    build:
      context: ./user
      dockerfile: Dockerfile
    ports:
      - "8000:3000"
    depends_on:
      user-db:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    environment:
      - ENV=development
      - MONGO_URI=mongodb://user-db:27017/user
    networks:
      - service-network
  product-service:
    build:
      context: ./product
      dockerfile: Dockerfile
    ports:
      - "8001:3000"
    depends_on:
      product-db:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    environment:
      - ENV=development
      - MONGO_URI=mongodb://product-db:27017/product
      - AMQP_URI=amqp://rabbitmq:5672
    networks:
      - service-network
  order-service:
    build:
      context: ./order
      dockerfile: Dockerfile
    ports:
      - "8002:3000"
    depends_on:
      order-db:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    environment:
      - ENV=development
      - MONGO_URI=mongodb://order-db:27017/order
      - AMQP_URI=amqp://rabbitmq:5672
    networks:
      - service-network
  user-db:
    image: mongo
    ports:
      - "27017:27017"
    networks:
      - service-network
  product-db:
    image: mongo
    ports:
      - "27018:27017"
    networks:
      - service-network
  order-db:
    image: mongo
    ports:
      - "27019:27017"
    networks:
      - service-network
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - service-network

networks:
  service-network:
